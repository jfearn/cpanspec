#!/usr/bin/env perl

=head1 NAME

cs-docker

=head1 VERSION

This document describes version 0.1

=head1 SYNOPSIS

cs-docker <options>

  --help|h	  Display help text
  --man		  Display man page
  --image         The Docker image to use. MANDATORY
  --build         Build the Docker image.
  --package=s     The CPAN module or archive to package. Can be set multiple times.
  --volume=s      Override the docker volume. Defaults to: 'cpanspec-$image'.
  --docker_dir=s  The directory to look for dockerfiles and sources. Defaults to: '/usr/share/cpanspec/Dockerfiles'.
  --lable=s       Override the volume and image name.
  --shell      Shell in to the container

=head1 DESCRIPTION

Convenience wrapper for using cpanspec in Docker!

=cut

use warnings;
use strict;
use 5.10.1;
use Carp;

use Capture::Tiny ':all';
use File::Basename;
use File::Copy;
use File::Path qw(make_path rmtree);
use Getopt::Long;
use Pod::Usage;

my $man  = 0;
my $help = 0;
my @packages;
my $image;
my $volume     = 'cpanspec';
my $docker_dir = '/usr/share/cpanspec/Dockerfiles';
my ($build, $lable, $shell, $sync, $to);

GetOptions(
    'help|h'       => \$help,
    'man'          => \$man,
    'build'        => \$build,
    'shell'        => \$shell,
    'package=s'    => \@packages,
    'image=s'      => \$image,
    'volume=s'     => \$volume,
    'docker_dir=s' => \$docker_dir,
    'lable=s'      => \$lable,
    'sync'         => \$sync,
    'to=s'         => \$to,
) || pod2usage(-verbose => 0);

pod2usage(-verbose => 1) if ($help);
pod2usage(-verbose => 2) if ($man);
pod2usage(-verbose => 1) unless ($image && ($build || @packages || $shell || $sync));

$volume .= "-$image" if ($volume eq 'cpanspec');
$lable = $volume unless ($lable);

if ($build) {
    build();
}
else {
    run();
}

exit;

#### subs ####

sub build {
    my $cmd
        = qq{docker build --rm --tag cpanspec-$image --file "$docker_dir/$image" "$docker_dir"};
    print("running: $cmd\n");

    system($cmd);

    return;
}

sub run {

    my $target = '';
    my %files;
    my $cmd = '';

    foreach my $pkg (@packages) {
        if (-f $pkg) {
            my $file_name = fileparse($pkg);
            $target .= "/cpanspec/$file_name ";
            $files{$file_name} = $pkg;
        }
        else {
            $target .= "$pkg ";
        }
    }

    $cmd = qq{docker volume create $volume};
    print("running: $cmd\n");
    system($cmd);

    $cmd = qq{docker volume ls -f name=$volume --format "{{.Mountpoint}}"};
    print("running: $cmd\n");
    my $mtp = qx/$cmd/;
    chomp($mtp);
    croak(qq{Working dir "$mtp" does not exist!}) unless ($mtp && $mtp ne '');

    my @files = values(%files);

    if (-f "bin/cpanspec") {
        push(@files, 'bin/cpanspec');
    }
    else {
        push(@files, '/usr/bin/cpanspec');
    }

    if ($shell) {
        $cmd
            = qq{docker run --rm --interactive --tty --volume=$volume:/cpanspec:rw --workdir=/cpanspec --name=$lable-tmp cpanspec-$image /bin/bash};
        print("running: $cmd\n");
        exec($cmd);
    }
    elsif ($sync) {
        croak "you need to suppl --to!" unless ($to);
        make_path($to) unless (-d $to);

        $cmd
            = qq{docker run -d --interactive --tty --volume=$volume:/cpanspec:rw --workdir=/cpanspec --name=$lable-sync cpanspec-$image /bin/bash};
        print("running: $cmd\n");

        my ($stdout, $stderr, $exit) = capture {
            system($cmd );
        };
        my $id = $stdout;
        chomp($id);
        $cmd = qq{docker cp -a $id:/cpanspec/repo $to/.};
        system($cmd);
        $cmd = qq{docker cp -a $id:/cpanspec/SRPMS $to/.};
        system($cmd);
        $cmd = qq{docker cp -a $id:/cpanspec/build_order.txt $to/.};
        system($cmd);
        system("docker stop $lable-sync && docker rm $lable-sync");

    }
    else {
        $cmd
            = qq{docker run -d --interactive --tty --volume=$volume:/cpanspec:rw --workdir=/cpanspec --name=$lable-tmp cpanspec-$image /bin/bash};
        print("running: $cmd\n");
        system($cmd);

        $cmd
            = qq{tar -c }
            . join(' ', @files)
            . qq{ | docker run -i --rm --workdir=/cpanspec --volumes-from=$lable-tmp cpanspec-$image /bin/tar -xv --transform='s#^.*/##'};
        print("running: $cmd\n");
        system($cmd);

        system("docker stop $lable-tmp && docker rm $lable-tmp");

        $cmd
            = qq{docker run --rm --interactive --tty --volume=$volume:/cpanspec:rw --workdir=/cpanspec --name=$lable cpanspec-$image bash -c "/usr/bin/perl /cpanspec/cpanspec --verbose --force --build --follow --path=/cpanspec --packager '$ENV{"USER"}' $target"};
        print("running: $cmd\n");
        system($cmd);
    }

    return;

}
